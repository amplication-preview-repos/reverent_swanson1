/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DataFile } from "./DataFile";
import { DataFileCountArgs } from "./DataFileCountArgs";
import { DataFileFindManyArgs } from "./DataFileFindManyArgs";
import { DataFileFindUniqueArgs } from "./DataFileFindUniqueArgs";
import { CreateDataFileArgs } from "./CreateDataFileArgs";
import { UpdateDataFileArgs } from "./UpdateDataFileArgs";
import { DeleteDataFileArgs } from "./DeleteDataFileArgs";
import { GeneratedImageFindManyArgs } from "../../generatedImage/base/GeneratedImageFindManyArgs";
import { GeneratedImage } from "../../generatedImage/base/GeneratedImage";
import { GeneratedPageFindManyArgs } from "../../generatedPage/base/GeneratedPageFindManyArgs";
import { GeneratedPage } from "../../generatedPage/base/GeneratedPage";
import { DataFileService } from "../dataFile.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DataFile)
export class DataFileResolverBase {
  constructor(
    protected readonly service: DataFileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DataFile",
    action: "read",
    possession: "any",
  })
  async _dataFilesMeta(
    @graphql.Args() args: DataFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DataFile])
  @nestAccessControl.UseRoles({
    resource: "DataFile",
    action: "read",
    possession: "any",
  })
  async dataFiles(
    @graphql.Args() args: DataFileFindManyArgs
  ): Promise<DataFile[]> {
    return this.service.dataFiles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DataFile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DataFile",
    action: "read",
    possession: "own",
  })
  async dataFile(
    @graphql.Args() args: DataFileFindUniqueArgs
  ): Promise<DataFile | null> {
    const result = await this.service.dataFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DataFile)
  @nestAccessControl.UseRoles({
    resource: "DataFile",
    action: "create",
    possession: "any",
  })
  async createDataFile(
    @graphql.Args() args: CreateDataFileArgs
  ): Promise<DataFile> {
    return await this.service.createDataFile({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DataFile)
  @nestAccessControl.UseRoles({
    resource: "DataFile",
    action: "update",
    possession: "any",
  })
  async updateDataFile(
    @graphql.Args() args: UpdateDataFileArgs
  ): Promise<DataFile | null> {
    try {
      return await this.service.updateDataFile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DataFile)
  @nestAccessControl.UseRoles({
    resource: "DataFile",
    action: "delete",
    possession: "any",
  })
  async deleteDataFile(
    @graphql.Args() args: DeleteDataFileArgs
  ): Promise<DataFile | null> {
    try {
      return await this.service.deleteDataFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GeneratedImage], { name: "generatedImages" })
  @nestAccessControl.UseRoles({
    resource: "GeneratedImage",
    action: "read",
    possession: "any",
  })
  async findGeneratedImages(
    @graphql.Parent() parent: DataFile,
    @graphql.Args() args: GeneratedImageFindManyArgs
  ): Promise<GeneratedImage[]> {
    const results = await this.service.findGeneratedImages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [GeneratedPage], { name: "generatedPages" })
  @nestAccessControl.UseRoles({
    resource: "GeneratedPage",
    action: "read",
    possession: "any",
  })
  async findGeneratedPages(
    @graphql.Parent() parent: DataFile,
    @graphql.Args() args: GeneratedPageFindManyArgs
  ): Promise<GeneratedPage[]> {
    const results = await this.service.findGeneratedPages(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
