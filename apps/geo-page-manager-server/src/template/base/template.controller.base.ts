/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TemplateService } from "../template.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TemplateCreateInput } from "./TemplateCreateInput";
import { Template } from "./Template";
import { TemplateFindManyArgs } from "./TemplateFindManyArgs";
import { TemplateWhereUniqueInput } from "./TemplateWhereUniqueInput";
import { TemplateUpdateInput } from "./TemplateUpdateInput";
import { GeneratedImageFindManyArgs } from "../../generatedImage/base/GeneratedImageFindManyArgs";
import { GeneratedImage } from "../../generatedImage/base/GeneratedImage";
import { GeneratedImageWhereUniqueInput } from "../../generatedImage/base/GeneratedImageWhereUniqueInput";
import { GeneratedPageFindManyArgs } from "../../generatedPage/base/GeneratedPageFindManyArgs";
import { GeneratedPage } from "../../generatedPage/base/GeneratedPage";
import { GeneratedPageWhereUniqueInput } from "../../generatedPage/base/GeneratedPageWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TemplateControllerBase {
  constructor(
    protected readonly service: TemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Template })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTemplate(
    @common.Body() data: TemplateCreateInput
  ): Promise<Template> {
    return await this.service.createTemplate({
      data: data,
      select: {
        createdAt: true,
        createdBy: true,
        file: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Template] })
  @ApiNestedQuery(TemplateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async templates(@common.Req() request: Request): Promise<Template[]> {
    const args = plainToClass(TemplateFindManyArgs, request.query);
    return this.service.templates({
      ...args,
      select: {
        createdAt: true,
        createdBy: true,
        file: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Template })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async template(
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<Template | null> {
    const result = await this.service.template({
      where: params,
      select: {
        createdAt: true,
        createdBy: true,
        file: true,
        id: true,
        name: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Template })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTemplate(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() data: TemplateUpdateInput
  ): Promise<Template | null> {
    try {
      return await this.service.updateTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          createdBy: true,
          file: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Template })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTemplate(
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<Template | null> {
    try {
      return await this.service.deleteTemplate({
        where: params,
        select: {
          createdAt: true,
          createdBy: true,
          file: true,
          id: true,
          name: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/generatedImages")
  @ApiNestedQuery(GeneratedImageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GeneratedImage",
    action: "read",
    possession: "any",
  })
  async findGeneratedImages(
    @common.Req() request: Request,
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<GeneratedImage[]> {
    const query = plainToClass(GeneratedImageFindManyArgs, request.query);
    const results = await this.service.findGeneratedImages(params.id, {
      ...query,
      select: {
        createdAt: true,
        createdBy: true,

        dataFile: {
          select: {
            id: true,
          },
        },

        fileUrl: true,
        id: true,
        metaData: true,
        name: true,

        template: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/generatedImages")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async connectGeneratedImages(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: GeneratedImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      generatedImages: {
        connect: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/generatedImages")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async updateGeneratedImages(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: GeneratedImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      generatedImages: {
        set: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/generatedImages")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async disconnectGeneratedImages(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: GeneratedImageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      generatedImages: {
        disconnect: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/generatedPages")
  @ApiNestedQuery(GeneratedPageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "GeneratedPage",
    action: "read",
    possession: "any",
  })
  async findGeneratedPages(
    @common.Req() request: Request,
    @common.Param() params: TemplateWhereUniqueInput
  ): Promise<GeneratedPage[]> {
    const query = plainToClass(GeneratedPageFindManyArgs, request.query);
    const results = await this.service.findGeneratedPages(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        createdBy: true,

        dataFile: {
          select: {
            id: true,
          },
        },

        id: true,
        metaData: true,
        status: true,

        template: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/generatedPages")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async connectGeneratedPages(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: GeneratedPageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      generatedPages: {
        connect: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/generatedPages")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async updateGeneratedPages(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: GeneratedPageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      generatedPages: {
        set: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/generatedPages")
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "update",
    possession: "any",
  })
  async disconnectGeneratedPages(
    @common.Param() params: TemplateWhereUniqueInput,
    @common.Body() body: GeneratedPageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      generatedPages: {
        disconnect: body,
      },
    };
    await this.service.updateTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }
}
