/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GeneratedPage } from "./GeneratedPage";
import { GeneratedPageCountArgs } from "./GeneratedPageCountArgs";
import { GeneratedPageFindManyArgs } from "./GeneratedPageFindManyArgs";
import { GeneratedPageFindUniqueArgs } from "./GeneratedPageFindUniqueArgs";
import { CreateGeneratedPageArgs } from "./CreateGeneratedPageArgs";
import { UpdateGeneratedPageArgs } from "./UpdateGeneratedPageArgs";
import { DeleteGeneratedPageArgs } from "./DeleteGeneratedPageArgs";
import { DataFile } from "../../dataFile/base/DataFile";
import { Template } from "../../template/base/Template";
import { GeneratedPageService } from "../generatedPage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GeneratedPage)
export class GeneratedPageResolverBase {
  constructor(
    protected readonly service: GeneratedPageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GeneratedPage",
    action: "read",
    possession: "any",
  })
  async _generatedPagesMeta(
    @graphql.Args() args: GeneratedPageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GeneratedPage])
  @nestAccessControl.UseRoles({
    resource: "GeneratedPage",
    action: "read",
    possession: "any",
  })
  async generatedPages(
    @graphql.Args() args: GeneratedPageFindManyArgs
  ): Promise<GeneratedPage[]> {
    return this.service.generatedPages(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GeneratedPage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GeneratedPage",
    action: "read",
    possession: "own",
  })
  async generatedPage(
    @graphql.Args() args: GeneratedPageFindUniqueArgs
  ): Promise<GeneratedPage | null> {
    const result = await this.service.generatedPage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GeneratedPage)
  @nestAccessControl.UseRoles({
    resource: "GeneratedPage",
    action: "create",
    possession: "any",
  })
  async createGeneratedPage(
    @graphql.Args() args: CreateGeneratedPageArgs
  ): Promise<GeneratedPage> {
    return await this.service.createGeneratedPage({
      ...args,
      data: {
        ...args.data,

        dataFile: args.data.dataFile
          ? {
              connect: args.data.dataFile,
            }
          : undefined,

        template: args.data.template
          ? {
              connect: args.data.template,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GeneratedPage)
  @nestAccessControl.UseRoles({
    resource: "GeneratedPage",
    action: "update",
    possession: "any",
  })
  async updateGeneratedPage(
    @graphql.Args() args: UpdateGeneratedPageArgs
  ): Promise<GeneratedPage | null> {
    try {
      return await this.service.updateGeneratedPage({
        ...args,
        data: {
          ...args.data,

          dataFile: args.data.dataFile
            ? {
                connect: args.data.dataFile,
              }
            : undefined,

          template: args.data.template
            ? {
                connect: args.data.template,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GeneratedPage)
  @nestAccessControl.UseRoles({
    resource: "GeneratedPage",
    action: "delete",
    possession: "any",
  })
  async deleteGeneratedPage(
    @graphql.Args() args: DeleteGeneratedPageArgs
  ): Promise<GeneratedPage | null> {
    try {
      return await this.service.deleteGeneratedPage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => DataFile, {
    nullable: true,
    name: "dataFile",
  })
  @nestAccessControl.UseRoles({
    resource: "DataFile",
    action: "read",
    possession: "any",
  })
  async getDataFile(
    @graphql.Parent() parent: GeneratedPage
  ): Promise<DataFile | null> {
    const result = await this.service.getDataFile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Template, {
    nullable: true,
    name: "template",
  })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  async getTemplate(
    @graphql.Parent() parent: GeneratedPage
  ): Promise<Template | null> {
    const result = await this.service.getTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
