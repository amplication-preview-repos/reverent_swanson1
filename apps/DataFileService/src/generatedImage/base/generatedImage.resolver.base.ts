/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GeneratedImage } from "./GeneratedImage";
import { GeneratedImageCountArgs } from "./GeneratedImageCountArgs";
import { GeneratedImageFindManyArgs } from "./GeneratedImageFindManyArgs";
import { GeneratedImageFindUniqueArgs } from "./GeneratedImageFindUniqueArgs";
import { CreateGeneratedImageArgs } from "./CreateGeneratedImageArgs";
import { UpdateGeneratedImageArgs } from "./UpdateGeneratedImageArgs";
import { DeleteGeneratedImageArgs } from "./DeleteGeneratedImageArgs";
import { DataFile } from "../../dataFile/base/DataFile";
import { GeneratedImageService } from "../generatedImage.service";
@graphql.Resolver(() => GeneratedImage)
export class GeneratedImageResolverBase {
  constructor(protected readonly service: GeneratedImageService) {}

  async _generatedImagesMeta(
    @graphql.Args() args: GeneratedImageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GeneratedImage])
  async generatedImages(
    @graphql.Args() args: GeneratedImageFindManyArgs
  ): Promise<GeneratedImage[]> {
    return this.service.generatedImages(args);
  }

  @graphql.Query(() => GeneratedImage, { nullable: true })
  async generatedImage(
    @graphql.Args() args: GeneratedImageFindUniqueArgs
  ): Promise<GeneratedImage | null> {
    const result = await this.service.generatedImage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GeneratedImage)
  async createGeneratedImage(
    @graphql.Args() args: CreateGeneratedImageArgs
  ): Promise<GeneratedImage> {
    return await this.service.createGeneratedImage({
      ...args,
      data: {
        ...args.data,

        dataFile: args.data.dataFile
          ? {
              connect: args.data.dataFile,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => GeneratedImage)
  async updateGeneratedImage(
    @graphql.Args() args: UpdateGeneratedImageArgs
  ): Promise<GeneratedImage | null> {
    try {
      return await this.service.updateGeneratedImage({
        ...args,
        data: {
          ...args.data,

          dataFile: args.data.dataFile
            ? {
                connect: args.data.dataFile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GeneratedImage)
  async deleteGeneratedImage(
    @graphql.Args() args: DeleteGeneratedImageArgs
  ): Promise<GeneratedImage | null> {
    try {
      return await this.service.deleteGeneratedImage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => DataFile, {
    nullable: true,
    name: "dataFile",
  })
  async getDataFile(
    @graphql.Parent() parent: GeneratedImage
  ): Promise<DataFile | null> {
    const result = await this.service.getDataFile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
