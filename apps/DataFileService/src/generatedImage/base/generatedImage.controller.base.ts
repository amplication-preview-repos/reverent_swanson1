/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GeneratedImageService } from "../generatedImage.service";
import { GeneratedImageCreateInput } from "./GeneratedImageCreateInput";
import { GeneratedImage } from "./GeneratedImage";
import { GeneratedImageFindManyArgs } from "./GeneratedImageFindManyArgs";
import { GeneratedImageWhereUniqueInput } from "./GeneratedImageWhereUniqueInput";
import { GeneratedImageUpdateInput } from "./GeneratedImageUpdateInput";

export class GeneratedImageControllerBase {
  constructor(protected readonly service: GeneratedImageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GeneratedImage })
  async createGeneratedImage(
    @common.Body() data: GeneratedImageCreateInput
  ): Promise<GeneratedImage> {
    return await this.service.createGeneratedImage({
      data: {
        ...data,

        dataFile: data.dataFile
          ? {
              connect: data.dataFile,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        createdBy: true,

        dataFile: {
          select: {
            id: true,
          },
        },

        fileUrl: true,
        id: true,
        metaData: true,
        name: true,
        templateId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GeneratedImage] })
  @ApiNestedQuery(GeneratedImageFindManyArgs)
  async generatedImages(
    @common.Req() request: Request
  ): Promise<GeneratedImage[]> {
    const args = plainToClass(GeneratedImageFindManyArgs, request.query);
    return this.service.generatedImages({
      ...args,
      select: {
        createdAt: true,
        createdBy: true,

        dataFile: {
          select: {
            id: true,
          },
        },

        fileUrl: true,
        id: true,
        metaData: true,
        name: true,
        templateId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GeneratedImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async generatedImage(
    @common.Param() params: GeneratedImageWhereUniqueInput
  ): Promise<GeneratedImage | null> {
    const result = await this.service.generatedImage({
      where: params,
      select: {
        createdAt: true,
        createdBy: true,

        dataFile: {
          select: {
            id: true,
          },
        },

        fileUrl: true,
        id: true,
        metaData: true,
        name: true,
        templateId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GeneratedImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGeneratedImage(
    @common.Param() params: GeneratedImageWhereUniqueInput,
    @common.Body() data: GeneratedImageUpdateInput
  ): Promise<GeneratedImage | null> {
    try {
      return await this.service.updateGeneratedImage({
        where: params,
        data: {
          ...data,

          dataFile: data.dataFile
            ? {
                connect: data.dataFile,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          createdBy: true,

          dataFile: {
            select: {
              id: true,
            },
          },

          fileUrl: true,
          id: true,
          metaData: true,
          name: true,
          templateId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GeneratedImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGeneratedImage(
    @common.Param() params: GeneratedImageWhereUniqueInput
  ): Promise<GeneratedImage | null> {
    try {
      return await this.service.deleteGeneratedImage({
        where: params,
        select: {
          createdAt: true,
          createdBy: true,

          dataFile: {
            select: {
              id: true,
            },
          },

          fileUrl: true,
          id: true,
          metaData: true,
          name: true,
          templateId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
