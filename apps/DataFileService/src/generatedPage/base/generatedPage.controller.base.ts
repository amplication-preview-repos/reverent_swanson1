/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GeneratedPageService } from "../generatedPage.service";
import { GeneratedPageCreateInput } from "./GeneratedPageCreateInput";
import { GeneratedPage } from "./GeneratedPage";
import { GeneratedPageFindManyArgs } from "./GeneratedPageFindManyArgs";
import { GeneratedPageWhereUniqueInput } from "./GeneratedPageWhereUniqueInput";
import { GeneratedPageUpdateInput } from "./GeneratedPageUpdateInput";

export class GeneratedPageControllerBase {
  constructor(protected readonly service: GeneratedPageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GeneratedPage })
  async createGeneratedPage(
    @common.Body() data: GeneratedPageCreateInput
  ): Promise<GeneratedPage> {
    return await this.service.createGeneratedPage({
      data: {
        ...data,

        dataFile: data.dataFile
          ? {
              connect: data.dataFile,
            }
          : undefined,
      },
      select: {
        content: true,
        createdAt: true,
        createdBy: true,

        dataFile: {
          select: {
            id: true,
          },
        },

        id: true,
        metaData: true,
        status: true,
        templateId: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GeneratedPage] })
  @ApiNestedQuery(GeneratedPageFindManyArgs)
  async generatedPages(
    @common.Req() request: Request
  ): Promise<GeneratedPage[]> {
    const args = plainToClass(GeneratedPageFindManyArgs, request.query);
    return this.service.generatedPages({
      ...args,
      select: {
        content: true,
        createdAt: true,
        createdBy: true,

        dataFile: {
          select: {
            id: true,
          },
        },

        id: true,
        metaData: true,
        status: true,
        templateId: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GeneratedPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async generatedPage(
    @common.Param() params: GeneratedPageWhereUniqueInput
  ): Promise<GeneratedPage | null> {
    const result = await this.service.generatedPage({
      where: params,
      select: {
        content: true,
        createdAt: true,
        createdBy: true,

        dataFile: {
          select: {
            id: true,
          },
        },

        id: true,
        metaData: true,
        status: true,
        templateId: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GeneratedPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGeneratedPage(
    @common.Param() params: GeneratedPageWhereUniqueInput,
    @common.Body() data: GeneratedPageUpdateInput
  ): Promise<GeneratedPage | null> {
    try {
      return await this.service.updateGeneratedPage({
        where: params,
        data: {
          ...data,

          dataFile: data.dataFile
            ? {
                connect: data.dataFile,
              }
            : undefined,
        },
        select: {
          content: true,
          createdAt: true,
          createdBy: true,

          dataFile: {
            select: {
              id: true,
            },
          },

          id: true,
          metaData: true,
          status: true,
          templateId: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GeneratedPage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGeneratedPage(
    @common.Param() params: GeneratedPageWhereUniqueInput
  ): Promise<GeneratedPage | null> {
    try {
      return await this.service.deleteGeneratedPage({
        where: params,
        select: {
          content: true,
          createdAt: true,
          createdBy: true,

          dataFile: {
            select: {
              id: true,
            },
          },

          id: true,
          metaData: true,
          status: true,
          templateId: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
